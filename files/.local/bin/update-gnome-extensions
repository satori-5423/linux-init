#!/usr/bin/env bash
set -e

check_dependencies() {
  local missing=()
  for cmd in git make zip wget curl gnome-extensions just jq meson ninja; do
    if ! command -v "$cmd" &>/dev/null; then
      missing+=("$cmd")
    fi
  done
  if [ ${#missing[@]} -ne 0 ]; then
    echo "Error: Missing commands: ${missing[*]}"
    echo "Please install them and try again."
    exit 1
  fi
}
check_dependencies

EXT_DIR="$HOME/GitHub/gnome-extensions"
mkdir -p "$EXT_DIR"

declare -A extensions_install_cmd=(
  ["AppIndicator and KStatusNotifierItem Support"]="meson gnome-shell-extension-appindicator /tmp/g-s-appindicators-build && ninja -C /tmp/g-s-appindicators-build install"
  ["Blur My Shell"]="make install"
  ["Burn My Windows"]="make install"
  ["Dash to Dock"]="make install"
  ["Disable unredirect fullscreen windows"]=""
  ["Desktop Icons NG (DING)"]="meson --prefix=$HOME/.local/ --localedir=share/gnome-shell/extensions/ding@rastersoft.com/locale .build && ninja -C .build install"
  ["Hide Top Bar"]="make && gnome-extensions install --force ./hidetopbar.zip"
  ["Logo Menu"]="make install"
  ["Rounded Window Corners Reborn"]="just install"
)

declare -A extensions_repo=(
  ["AppIndicator and KStatusNotifierItem Support"]="https://github.com/ubuntu/gnome-shell-extension-appindicator.git"
  ["Blur My Shell"]="https://github.com/aunetx/blur-my-shell.git"
  ["Burn My Windows"]="https://github.com/Schneegans/Burn-My-Windows.git"
  ["Dash to Dock"]="https://github.com/micheleg/dash-to-dock.git"
  ["Disable unredirect fullscreen windows"]="https://github.com/kazysmaster/gnome-shell-extension-disable-unredirect.git"
  ["Desktop Icons NG (DING)"]="https://gitlab.com/rastersoft/desktop-icons-ng.git"
  ["Hide Top Bar"]="https://gitlab.gnome.org/tuxor1337/hidetopbar.git"
  ["Logo Menu"]="https://github.com/Aryan20/Logomenu.git"
  ["Rounded Window Corners Reborn"]="https://github.com/flexagoon/rounded-window-corners.git"
  ["Unite"]="https://github.com/hardpixel/unite-shell.git"
)

install_unite() {
  echo "[+] Installing or updating Unite"

  local cache_dir="$EXT_DIR"
  local latest=""
  local retries=10

  mkdir -p "$cache_dir"

  for i in $(seq 1 $retries); do
    latest=$(curl -s https://api.github.com/repos/hardpixel/unite-shell/releases/latest | jq -r .tag_name)
    if [[ -n "$latest" && "$latest" != "null" ]]; then
      break
    fi
    echo "Waiting to fetch Unite latest release ($i/$retries)..."
    sleep 1
  done

  if [[ -z "$latest" || "$latest" == "null" ]]; then
    echo "Error: Failed to fetch Unite latest version."
    return 1
  fi

  echo "Latest version: $latest"

  local zip_name="unite-$latest.zip"
  local zip_path="$cache_dir/$zip_name"

  if [[ -f "$zip_path" ]]; then
    echo "Version $latest already exists, skipping download and install."
    return 0
  fi

  echo "Cleaning old zip files..."
  rm -f "$cache_dir"/unite-*.zip

  echo "Downloading $zip_name..."
  wget -O "$zip_path" "https://github.com/hardpixel/unite-shell/releases/download/$latest/$zip_name" || {
    echo "Error: Download failed."
    return 1
  }

  echo "Installing Unite $latest..."
  gnome-extensions install --force "$zip_path"
}

for name in "${!extensions_repo[@]}"; do
  repo=${extensions_repo[$name]}

  echo -e "\n===> Processing extension: $name"
  read -rp "Update $name? [Y/n]: " choice
  choice=${choice:-Y}
  if [[ ! "$choice" =~ ^[Yy]$ ]]; then
    echo "Skipped: $name"
    continue
  fi

  if [[ "$name" == "Disable unredirect fullscreen windows" ]]; then
    ext=~/.local/share/gnome-shell/extensions
    mkdir -p "$ext" && cd "$ext" && \
    curl -LkSs https://api.github.com/repos/kazysmaster/gnome-shell-extension-disable-unredirect/tarball \
      | tar -xvz --wildcards --strip 1 "kazysmaster-gnome-shell-extension-disable-unredirect-???????/unredirect@vaina.lt"
    continue
  fi

  if [[ "$name" == "Unite" ]]; then
    install_unite || echo "Warning: Unite installation failed, skipped."
    continue
  fi

  dir_name=$(basename "$repo" .git)
  local_dir="$EXT_DIR/$dir_name"

  if [[ -d "$local_dir" ]]; then
    echo "[+] Found local repo, updating: $dir_name"
    git -C "$local_dir" pull
  else
    echo "[+] Cloning repo: $repo"
    git clone "$repo" "$local_dir"
  fi

  echo "[+] Installing: $name"
  if [[ "$name" == "AppIndicator and KStatusNotifierItem Support" ]]; then
    local_dir="$EXT_DIR"
  fi
  bash -c "cd '$local_dir' && ${extensions_install_cmd[$name]}"
done

echo -e "\nAll extensions processed. Please restart GNOME Shell or log out/in to apply changes."
